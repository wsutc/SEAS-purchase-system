# Generated by Django 4.0.3 on 2022-10-18 19:51

import logging

import django.utils.timezone
from django.apps import apps

# from django.conf import settings
from django.core.exceptions import FieldDoesNotExist
from django.db import migrations, models

# from functools import partial
# from socket import gethostname

# from sqlite3 import OperationalError

logging.basicConfig(level="DEBUG")

MIGRATE_ID = "deploy_init"

FIELD_LIST = [
    "accounts.cost_center",
    # "carrier.created_date",
    # "spendcategory.created_date",
    # "spendcategory.slug",
]

OPERATIONS = [
    migrations.AlterModelOptions(
        name="accounts",
        options={"ordering": ["account_title"], "verbose_name_plural": "Accounts"},
    ),
    migrations.AddField(model_name="accounts", name="slug", field=models.SlugField()),
    migrations.RemoveField(
        model_name="accounts",
        name="slug",
    ),
    migrations.AddField(
        model_name="purchaserequest",
        name="new_st",
        field=models.DecimalField(max_digits=10, decimal_places=2),
    ),
    migrations.RemoveField(
        model_name="purchaserequest",
        name="new_st",
    ),
    migrations.AddField(
        model_name="accounts",
        name="cost_center",
        field=models.CharField(max_length=15, null=True),
        preserve_default=False,
    ),
    migrations.AddField(
        model_name="carrier",
        name="created_date",
        field=models.DateTimeField(
            auto_now_add=True, default=django.utils.timezone.now
        ),
        preserve_default=False,
    ),
    migrations.AddField(
        model_name="spendcategory",
        name="created_date",
        field=models.DateTimeField(
            auto_now_add=True, default=django.utils.timezone.now
        ),
        preserve_default=False,
    ),
    migrations.AddField(
        model_name="spendcategory",
        name="slug",
        field=models.SlugField(
            default="test",
            editable=False,
            unique=True,
        ),
        preserve_default=False,
    ),
    migrations.AlterField(
        model_name="carrier",
        name="name",
        field=models.CharField(max_length=50),
    ),
    migrations.AlterField(
        model_name="simpleproduct",
        name="rank",
        field=models.SmallIntegerField(editable=False, verbose_name="in pr ordering"),
    ),
]

# SCARY_FIELD_LIST = ["accounts.cost_center"]

# if not dev_machine:
#     for index, op in enumerate(OPERATIONS):
#         if isinstance(op, migrations.AddField):
#             model_name, name = op.model_name, op.name
#             if f"{model_name}.{name}" in SCARY_FIELD_LIST:
#                 logging.info(
#                     f"Replacing AddField with RemoveField for '{model_name}.{name}"
#                 )
#                 print(f"Replacing AddField with RemoveField for '{model_name}.{name}")
#                 OPERATIONS[index] = migrations.RemoveField(
#                     model_name=model_name,
#                     name=name,
#                 )

# read_migration_id = settings.MIGRATION_SWITCH_ID

# print(f"MIGRATION_SWITCH_ID: {read_migration_id}\nMIGRATE_ID: {MIGRATE_ID}")

# if read_migration_id == MIGRATE_ID:
for index, op in enumerate(OPERATIONS):
    if isinstance(op, migrations.AddField):
        model_name, name = op.model_name, op.name
        model_obj = apps.get_model("purchases", model_name)
        if f"{model_name}.{name}" in FIELD_LIST:
            try:
                field = model_obj._meta.get_field(name)
            except FieldDoesNotExist:
                logging.info(f"Field '{model_name}.{name} does not exist", exc_info=1)
                print(f"Field '{model_name}.{name} does not exist")
                # leave alone
            else:
                logging.info(f"Replacing AddField with RunSQL for '{model_name}.{name}")
                print(f"Replacing AddField with RunSQL for '{model_name}.{name}")
                # OPERATIONS[index] = migrations.AlterField(
                #     model_name=model_name,
                #     name=name,
                #     field=op.field,
                # )
                OPERATIONS[index] = migrations.RunSQL(
                    "ALTER TABLE accounts ALTER COLUMN cost_center varchar(15) NULL",
                    state_operations=OPERATIONS[index],
                )
                print(f"Modified operation field: {OPERATIONS[index]}")

for i, op in enumerate(OPERATIONS):
    print(f"Operation[{i}]: {op}")


# app = apps.get_app_config("purchases")

# for field in FIELD_LIST:
#     model_name, name = field.split(".")
#     model = app.get_model(model_name)
#     try:
#         field_obj = model._meta.get_field(name)
#         print(f"{field_obj} exists.")
#     except FieldDoesNotExist:
#         print(f"{field} does NOT exist.")
#     except Exception as err:
#         print(f"Exception: {err}")


# def manage_field(apps, schema_editor, field_dict):
#     model = apps.get_model("purchases", field_dict["model_name"])
#     try:
#         model._meta.get_field(field_dict["name"])
#     except FieldDoesNotExist:
#         migrations.AddField(
#             model_name=field_dict["model_name"],
#             name=field_dict["name"],
#             field=field_dict["field"],
#             preserve_default=field_dict["preserve_default"],
#         )
#         print(f"Field added: {field_dict['model_name']}.{field_dict['name']}")
#         logging.info(f"Field added: {field_dict['model_name']}.{field_dict['name']}")
#     else:
#         migrations.AlterField(
#             model_name=field_dict["model_name"],
#             name=field_dict["name"],
#             field=field_dict["field"],
#             preserve_default=field_dict["preserve_default"],
#         )
#         logging.info(f"Field altered: {field_dict['model_name']}.{field_dict['name']}")  # noqa: E501
#         print(f"Field altered: {field_dict['model_name']}.{field_dict['name']}")

#     try:
#         model._meta.get_field(field_dict["name"])
#         print(f"Field exists: {field_dict['model_name']}.{field_dict['name']}")
#     except Exception:
#         print("Still failed.")


class Migration(migrations.Migration):

    # def __init__(self, name, app_label):
    #     print("init is running")
    #     app = apps.get_app_config(app_label)
    #     for field in self.FIELD_LIST:
    #         model_name, name = field.split(".")
    #         model = app.get_model(model_name)
    #         try:
    #             model._meta.get_field(name)
    #             print(f"{field} exists.")
    #         except FieldDoesNotExist:
    #             print(f"{field} does NOT exist.")

    #     super().__init__(name, app_label)

    dependencies = [
        (
            "purchases",
            "0061_auto_20220824_1450_squashed_0127_remove_purchaserequest_gravatar_email",  # noqa: E501
        ),
    ]

    operations = OPERATIONS
