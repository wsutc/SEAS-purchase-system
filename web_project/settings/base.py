"""
Django settings for web_project project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path

import environ
from django.contrib.messages import constants as message_constants

# env = environ.Env()
env = environ.Env(DEBUG=(bool, False))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

READ_DOT_ENV_FILE = env.bool("DJANGO_READ_DOT_ENV_FILE", default=False)
if READ_DOT_ENV_FILE:
    env.read_env(str(BASE_DIR / ".env"))

APPS_DIR = BASE_DIR / "web_project"

# env_path = os.path.join(BASE_DIR, ".env")

# print(env_path)

# environ.Env.read_env(env_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("DJANGO_SECRET_KEY", default="!!!SET DJANGO_SECRET_KEY!!!")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DJANGO_DEBUG", False)
TEMPLATE_DEBUG = env.bool("DJANGO_TEMPLATE_DEBUG", False)
# DEBUG = True
# TEMPLATE_DEBUG = True

if DEBUG:
    MESSAGE_LEVEL = message_constants.DEBUG
else:
    MESSAGE_LEVEL = message_constants.WARNING

ALLOWED_HOSTS = ["127.0.0.1", "33af-69-166-40-1.ngrok.io"]


# Application definition

# CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "django_listview_filters",
    "phonenumber_field",
    "djmoney",
    "django_mysql",
    "django_select2",
]

LOCAL_APPS = [
    "purchases",
    "setup_sheets",
    "inventory",
    "tool_compatibility",
    "accounts",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "web_project.urls"


# TEMPLATES
# -----------------------------------------------------------------
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # 'purchases.views.manufacturers',
                # 'purchases.views.states',
            ],
        },
    },
]

FORM_RENDERER = "django.forms.renderers.TemplateSetting"

WSGI_APPLICATION = "web_project.wsgi.application"


# MEDIA
# ----------------------------------------------------------------------------------------
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"


# Database
# ----------------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": env.db(
        "DATABASE_URL",
        default={
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        },
    )
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
    # "default": {
    #     "ENGINE": "django.db.backends.mysql",
    #     "NAME": env("DB_NAME"),
    #     "USER": env("DB_USER"),
    #     "PASSWORD": env("DB_PASSWORD"),
    #     "HOST": env("DB_HOST"),
    #     "PORT": env("DB_PORT"),
    #     "CHARSET": "utf8mb4",
    #     "COLLATION": "utf8mb4_unicode_ci",
    # },
    # "TEST": {"CHARSET": "utf8mb4", "COLLATION": "utf8mb4_unicode_ci"},
}

# AUTHENTICATION
# --------------------------------------------------------------------------------
AUTHENTICATION_BACKENDS = ["django.contrib.auth.backends.ModelBackend"]
AUTH_USER_MODEL = "users.User"
LOGIN_REDIRECT_URL = "/"
LOGIN_URL = "account_login"

# PASSWORDS
# --------------------------------------------------------------------------------

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

# TIME_ZONE = 'UTC'
TIME_ZONE = "America/Los_Angeles"

USE_I18N = True

USE_TZ = True

# STATIC
# ----------------------------------------------------------------------------

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "/"
STATIC_ROOT = str(BASE_DIR / "staticfiles")
STATICFILES_DIRS = [str(APPS_DIR / "static")]
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

INTERNAL_IPS = ("127.0.0.1",)


# EMAIL
# -----------------------------------------------------------------------------
EMAIL_BACKEND = env(
    "DJANGO_EMAIL_BACKEND", default="django.core.mail.backends.smtp.EmailBackend"
)

EMAIL_TIMEOUT = 5


# ADMINS
# -------------------------------------------------------------------------------
ADMIN_URL = "admin/"


# LOGGING
# -----------------------------------------------------------------------------
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "formatters": {
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "[{server_time}] {levelname} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} `{module}` {message}",
            "style": "{",
        },
        "verbose": {
            "format": "{levelname} {asctime} {module} "
            "{process} {thread} {message}"
            # "format": "%(levelname)s %(asctime)s %(module)s "
            # "%(process)d %(thread)d %(message)s"
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            # "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
        },
    },
    "loggers": {
        "purchases": {
            "handlers": ["console"],
            "level": "INFO",
        },
        "django": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
            "propagate": False,
        },
        "django.server": {
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console"],
            "level": "INFO",
        },
    },
    "root": {"level": "INFO", "handlers": ["console"]},
}


# THIRD-PARTY
# -------------------------------------------------------------------
PHONENUMBER_DEFAULT_REGION = "US"
PHONENUMBER_DEFAULT_FORMAT = "NATIONAL"

FILTERVIEW_SHOW_UNUSED_FILTERS = False
FILTERVIEW_SHOW_ALL = False

# CUSTOM
# -------------------------------------------------------------------

DEFAULT_TAX_RATE = ".087"
DEFAULT_INSTRUCTIONS = "Because grand total amount does not include shipping/handling and tax costs, Dr. Mo approves if total costs exceeds grand total amount."

_17TRACK_KEY = env.str("_17TRACK_KEY", default="!!!MISSING API KEY!!!")

MESSAGE_TAGS = {
    message_constants.SUCCESS: "alert alert-success",
    message_constants.ERROR: "alert alert-danger",
    message_constants.WARNING: "alert alert-warning",
    message_constants.INFO: "alert alert-info",
    message_constants.DEBUG: "alert alert-secondary",
}

TRACKER_PARAMS = [
    "trackingnumber",
    "tracking_number",
    "strorigtracknum",
]

# Constance

# CONSTANCE_CONFIG = {
#     'DEFAULT_TAX_RATE': ('.086','Default Sales Tax Rate (8.6 is entered as .086'),
#     'DEFAULT_INSTRUCTIONS': ('Because grand total amount does not include shipping/handling and tax costs, Dr. Mo approves if total costs exceeds grand total amount.','Default "Instructions" on Purchase Requests')
# }


# EASYPOST_KEY = env('EASYPOST_KEY')
# AFTERSHIP_KEY = env('AFTERSHIP_KEY')
# AFTERSHIP_WEBHOOK_SECRET = env('AFTERSHIP_WEBHOOK_SECRET')
# SHIP24_KEY = env('SHIP24_KEY')
# SHIP24_WEBHOOK_SECRET = env('SHIP24_WEBHOOK_SECRET')

# SMARTSHEET_SHEET_NAME = env('SMARTSHEET_SHEET_NAME')
